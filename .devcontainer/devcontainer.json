// Update the VARIANT arg in docker-compose.yml to pick a Python version: 3, 3.8, 3.7, 3.6 
{
	"name": "Packet Codespace (python and postgres)",
	"dockerComposeFile": "docker-compose.yaml",
	"service": "app",
  "mounts": [ "source=/var/run/docker.sock,target=/var/run/docker-host.sock,type=bind" ],

	// Set *default* container specific settings.json values on container create.
	"settings": {
		"sqltools.connections": [{
			"name": "Container database",
			"driver": "PostgreSQL",
			"previewLimit": 50,
			"server": "localhost",
			"port": 5432,
			"database": "postgres",
			"username": "postgres",
			"password": "mysecretpassword"
		}],
		"terminal.integrated.shell.linux": "/bin/bash",
		"python.pythonPath": "/opt/python/latest/bin/python",
		"python.linting.enabled": true,
		"python.linting.pylintEnabled": true,
		"python.formatting.autopep8Path": "/usr/local/py-utils/bin/autopep8",
		"python.formatting.blackPath": "/usr/local/py-utils/bin/black",
		"python.formatting.yapfPath": "/usr/local/py-utils/bin/yapf",
		"python.linting.banditPath": "/usr/local/py-utils/bin/bandit",
		"python.linting.flake8Path": "/usr/local/py-utils/bin/flake8",
		"python.linting.mypyPath": "/usr/local/py-utils/bin/mypy",
		"python.linting.pycodestylePath": "/usr/local/py-utils/bin/pycodestyle",
		"python.linting.pydocstylePath": "/usr/local/py-utils/bin/pydocstyle",
		"python.linting.pylintPath": "/usr/local/py-utils/bin/pylint",
		"python.testing.pytestPath": "/usr/local/py-utils/bin/pytest"
	},
	"remoteUser": "codespace",
	"overrideCommand": false,
	"workspaceMount": "source=${localWorkspaceFolder},target=/home/codespace/workspace,type=bind,consistency=cached",
	"workspaceFolder": "/home/codespace/workspace",
	"runArgs": [ "--cap-add=SYS_PTRACE", "--security-opt", "seccomp=unconfined", "--privileged", "--init" ],

	// Add the IDs of extensions you want installed when the container is created.
	"extensions": [
		"GitHub.vscode-pull-request-github",
		"ms-python.python",
		"mtxr.sqltools",
		"mtxr.sqltools-driver-pg"
	],

	// Use 'forwardPorts' to make a list of ports inside the container available locally.
	// "forwardPorts": [5000, 5432],

	// Use 'postCreateCommand' to run commands after the container is created.
	// "oryx build" will automatically install your dependencies and attempt to build your project
  "postCreateCommand": [
    "pip install --progress-bar=off install -r requirements.txt;",
    "yarn install && `yarn bin gulp production`;",
    "/home/codespace/.local/bin/flask db upgrade;"
  ]
}
